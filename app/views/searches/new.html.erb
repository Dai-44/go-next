<div class="flex justify-center items-center mx-auto">
  <%= button_tag '行き先を探す', type: 'button', id: 'toggle-form-button', class: 'bg-indigo-900 hover:bg-indigo-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 text-lg text-white font-bold py-3 px-6 rounded-lg my-4' %>
</div>

<div id="search-form" class="transition-all ease-in-out duration-500 max-h-0 overflow-hidden m-3">
  <%= form_with model: @user_selection, url: searches_path, class: "py-3 h-64", data: { turbo: false } do |form| %>
    <%= render 'shared/error_messages', object: form.object %>
    <%= form.hidden_field :latitude, id: 'hidden_latitude' %>
    <%= form.hidden_field :longitude, id: 'hidden_longitude' %>

    <div>
      <div class="flex flex-row justify-center items-center space-x-3">
        <!-- ドロップダウンを開くボタン -->
        <div class="form-element relative">
          <%= button_tag type: 'button', id: 'dropdownFeelingButton', class: 'inline-flex items-center px-4 py-2 text-md font-medium text-center text-slate-600 rounded-lg shadow-sm bg-white border-2 border-indigo-300 hover:border-indigo-500 focus:border-indigo-400 focus:ring focus:ring-indigo-200 focus:ring-opacity-50', data: { dropdown_toggle: 'dropdownFeeling' } do %>
            いまの気分
            <%= content_tag :svg, class: 'w-2.5 h-2.5 ms-2.5', aria: { hidden: true }, xmlns: 'http://www.w3.org/2000/svg', fill: 'none', viewBox: '0 0 10 6' do %>
              <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 1 4 4 4-4"/>
            <% end %>
          <% end %>
          <!-- ドロップダウンのコンテンツ -->
          <div id="dropdownFeeling" class="absolute z-10 top-14 left-0 hidden bg-white rounded-lg shadow w-60 dark:bg-gray-700">
            <ul class="px-2 pb-3 overflow-y-auto text-sm text-gray-700 dark:text-gray-200" aria-labelledby="dropdownFeelingButton">
              <div class="form-element space-y-2">
                <%= form.collection_radio_buttons :feeling, Feeling.all, :id, :name do |b| %>
                  <div class="flex items-center">
                    <%= b.radio_button(class: "form-radio") %>
                    <%= b.label(class: "ms-2 text-sm font-medium text-gray-900 dark:text-gray-300") %>
                  </div>
                <% end %>
              </div>
            </ul>
          </div>
        </div>

        <!-- 運転範囲の選択 -->
        <div class="form-element">
          <%= form.select :drive_range, options_for_select(@user_selection.drive_time_options), { include_blank: 'どのくらい走る？' }, class: "form-select block rounded-md shadow-sm text-slate-600 bg-white border-2 border-indigo-300 hover:border-indigo-500 focus:border-indigo-400 focus:ring focus:ring-indigo-200 focus:ring-opacity-50" %>
        </div>

        <!-- 検索ボタン -->
        <div class="form-element">
          <%= form.submit '検索', class: "bg-indigo-900 hover:bg-indigo-600 focus:outline-none text-white font-bold py-2 px-4 rounded" %>
        </div>
      </div>
    </div>
  <% end %>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const toggleButton = document.getElementById('toggle-form-button');
    const searchForm = document.getElementById('search-form');

    toggleButton.addEventListener('click', () => {
      if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition((position) => {
          // 位置情報の取得に成功したら、隠しフィールドに値をセット
          document.getElementById('hidden_latitude').value = position.coords.latitude;
          document.getElementById('hidden_longitude').value = position.coords.longitude;

          // 位置情報の取得後、フォームを表示
          showForm(searchForm);
        }, (error) => {
          console.error('位置情報の取得に失敗しました:', error);
          // 位置情報の取得に失敗した場合の処理（任意）
        });
      } else {
        console.log("Geolocation is not supported by this browser.");
        // Geolocation APIがサポートされていない場合の処理（任意）
      }
    });
  });

  function showForm(formElement) {
    if (formElement.classList.contains('max-h-0')) {
      formElement.classList.remove('max-h-0');
      formElement.classList.add('max-h-screen');
    } else {
      formElement.classList.add('max-h-0');
      formElement.classList.remove('max-h-screen');
    }
  }

  document.addEventListener('DOMContentLoaded', () => {
    const dropdownFeelingButton = document.getElementById('dropdownFeelingButton');
    const dropdownFeelingContent = document.getElementById('dropdownFeeling');

    // 気分のドロップダウン制御
    dropdownFeelingButton.addEventListener('click', (event) => {
      dropdownFeelingContent.classList.toggle('hidden');
      event.stopPropagation(); // ドキュメントのイベント伝播を停止
    });

    // ドロップダウン要素以外の場所がクリックされたらドロップダウンを閉じる
    document.addEventListener('click', (event) => {
      if (!dropdownFeelingButton.contains(event.target) && !dropdownFeelingContent.contains(event.target)) {
        dropdownFeelingContent.classList.add('hidden');
      }
    });
  });
</script>