<!-- マップの表示領域となる要素を定義。 -->
<div class="flex justify-center items-center">
  <div id="map" class="h-64 w-11/12 md:w-96 rounded-lg"></div>
</div>

<div>
  <div id="default-carousel" class="relative h-full w-full py-5 flex justify-center" data-carousel="slide">
    <!-- カルーセルのラッパー -->
    <div class="relative h-96 w-full md:w-96 overflow-hidden rounded-lg">
      <% @response['places'].each_with_index do |place, index| %>
        <!-- カルーセル内の個々のアイテム -->
        <div class="<%= 'hidden' unless index.zero? %> duration-700 ease-in-out h-full" data-carousel-item>
          <div class="bg-white rounded-lg py-5 mx-5 h-full flex flex-col items-center text-slate-700">
            <%#= image_tag @photos[index]['photoUri'], class: "my-2 px-5" %>
            <div class="h-full w-4/5 my-2 px-5">
              <div class="flex flex-row space-x-3 justify-center items-center w-full mb-2">
                <%= link_to place['displayName']['text'], place['websiteUri'], class: "text-center font-bold underline hover:text-slate-400", target: '_blank', rel: 'noopener noreferrer' %>
                <% if logged_in? %>
                  <%= render 'destinations/bookmark_button', place: place %>
                <% end %>
              </div>
              <div class="flex flex-col space-y-2 items-center w-full">
                <%= link_to 'ルート検索 (Yahoo!カーナビ)', "yjcarnavi://navi/select?lat=#{place['location']['latitude']}&lon=#{place['location']['longitude']}" %>
                <%= link_to 'ルート検索 (Google Map)', '#', class: 'google-map-link', data: { lat: place['location']['latitude'], lng: place['location']['longitude'] } %>
                <% if logged_in? %>
                  <%= link_to 'ここへ行く', drive_records_path(destination: {
                      name: place['displayName']['text'],
                      address: place['formattedAddress'],
                      top_level_area: place["addressComponents"].find { |component| component["types"].include?("administrative_area_level_1") }["longText"],
                      second_level_area: place["addressComponents"].find { |component| component["types"].include?("administrative_area_level_2") || component["types"].include?("locality") }["longText"],
                      latitude: place['location']['latitude'],
                      longitude: place['location']['longitude'],
                      type: place['primaryType']
                  }),
                  data: { turbo_method: :post }
                  %>
                <% end %>
              </div>
            </div>
          </div>
        </div>
      <% end %>

      <!-- カルーセルのインジケーター -->
      <div class="absolute bottom-0 left-0 right-0 flex justify-center p-4">
          <% @response['places'].each_with_index do |_, index| %>
              <button type="button" class="w-3 h-3 bg-slate-100 rounded-full mx-2 focus:outline-none focus:ring" data-carousel-slide-to="<%= index %>"></button>
          <% end %>
      </div>

      <!-- カルーセルのコントロールボタン -->
      <button type="button" class="absolute top-1/2 bottom-0 left-0 z-30 flex items-center justify-center w-10 h-10 mx-2 bg-white bg-opacity-75 rounded-full focus:outline-none focus:ring hover:bg-opacity-100" data-carousel-prev>
          <svg class="w-6 h-6 text-gray-700" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
          </svg>
      </button>
      <button type="button" class="absolute top-1/2 bottom-0 right-0 z-30 flex items-center justify-center w-10 h-10 mx-2 bg-white bg-opacity-75 rounded-full focus:outline-none focus:ring hover:bg-opacity-100" data-carousel-next>
          <svg class="w-6 h-6 text-gray-700" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
          </svg>
      </button>
    </div>
  </div>
</div>

<div class="flex items-center justify-center">
  <div class="flex justify-between space-x-8 pb-3 px-3">
    <%= link_to 'ここへ向かう', '#', class: "bg-indigo-900 hover:bg-indigo-700 focus:outline-none focus:ring-indigo-500 text-white text-center py-3 px-6 w-40 rounded-full" %>
    <%= link_to '再検索', '#', class: "hover:bg-slate-300 text-slate-600 text-center border border-slate-600 py-3 px-6 w-40 rounded-full" %>
  </div>
</div>

<script>
  // ページのDOM要素が全て読み込まれたら、ブラウザのセッションストレージに格納されている緯度と経度のデータを取得し、上記フォーム内の該当するhidden_fieldに設定する処理
  // 現在地の緯度と経度のデータは、ユーザーがフォームで選択した内容とまとめてコントローラに送って処理したいため、hidden_fieldに設定する
  document.addEventListener('DOMContentLoaded', (event) => {
  const latitude = sessionStorage.getItem('latitude');
  const longitude = sessionStorage.getItem('longitude');

  document.getElementById('hidden_latitude').value = latitude;
  document.getElementById('hidden_longitude').value = longitude;
  });


  // Searches#resultから受け取った各場所のデータ(@response['places'])を変数に格納
  const places = <%= @response['places'].to_json.html_safe %>;
  let markers = []; // マーカーを格納する配列

  function initMap() {
  // ブラウザのセッションストレージから現在地の緯度と経度を取得
    const latitude = parseFloat(sessionStorage.getItem('latitude'));
    const longitude = parseFloat(sessionStorage.getItem('longitude'));

    // 取得した現在地の緯度と経度を、マップの中心点の指定時に用いる定数に設定
    const currentLocation = { lat: latitude, lng: longitude };

    // 'map'をidに持つ要素に表示する地図を作成
    const map = new google.maps.Map(document.getElementById('map'), {
      zoom: 9,
      center: currentLocation,
      disableDefaultUI: true,
      mapTypeId: 'terrain'
    });

    // 現在地を示す青丸のアイコンを作成
    function setCurrentLocationMaker(map, position){
      new google.maps.Marker({
          position: position,
          map: map,
          icon: {
            path: google.maps.SymbolPath.CIRCLE,
            fillColor: '#115EC3',
            fillOpacity: 1,
            strokeColor: 'white',
            strokeWeight: 2,
            scale: 7
          },
      });
    }

    // 現在地を示す青丸のアイコンを表示
    setCurrentLocationMaker(map, currentLocation);
    // 検索結果として表示する各場所に対して繰り返し処理を定義し、マーカーを作成
    // 繰り返し処理の中で各マーカーに紐づく情報ウィンドウも作成し、マーカークリック時に表示されるようイベントハンドラを定義
    places.forEach(function(place) {
      const markerPosition = {
        lat: parseFloat(place['location']['latitude']),
        lng: parseFloat(place['location']['longitude'])
      }

      // マーカーを作成
      const marker = new google.maps.Marker({
        position: markerPosition,
        map: map,
        visible: false, // 初期状態では非表示に設定
      });
      markers.push(marker);
    })
    // 初期表示するカルーセルアイテムに対応するマーカーを表示
    updateMarkers(0);
  }

  // 指定されたインデックスのカルーセルアイテムに対応するマーカーを表示する関数
  function updateMarkers(index) {
    markers.forEach((marker, i) => {
      marker.setVisible(i === index); // 現在のアイテムに対応するマーカーのみを表示
    });
  }

  document.addEventListener('DOMContentLoaded', () => {
    // カルーセルアイテムの取得
    const items = document.querySelectorAll('[data-carousel-item]');
    // インジケーターの取得
    const indicators = document.querySelectorAll('[data-carousel-slide-to]');

    // 現在表示されているアイテムのインデックス
    let currentIndex = 0;

    function updateIndicators(newIndex) {
      // 現在アクティブなインジケーターのクラスを削除
      indicators[currentIndex].classList.remove('active-indicator');
      // 新しいインジケーターにアクティブクラスを追加
      indicators[newIndex].classList.add('active-indicator');
    }

    // 指定されたインデックスのアイテムに移動する関数
    function moveToItem(index) {
      if (index >= items.length) {
        index = 0; // 最後のアイテムから次に移動する場合は最初のアイテムに戻る
      } else if (index < 0) {
        index = items.length - 1; // 最初のアイテムから前に移動する場合は最後のアイテムに移動
      }
      items[currentIndex].classList.add('hidden'); // 現在のアイテムを非表示
      items[index].classList.remove('hidden'); // 新しいアイテムを表示
      updateIndicators(index); // インジケーターの更新
      updateMarkers(index); // マーカーの表示を更新
      currentIndex = index; // 現在のインデックスを更新
    }

    // インジケーターのクリックイベント処理
    indicators.forEach(button => {
      button.addEventListener('click', (e) => {
        const index = parseInt(e.target.getAttribute('data-carousel-slide-to'));
        moveToItem(index); // クリックされたインジケーターのインデックスに移動
      });
    });

    // 前のアイテムに移動するボタンのイベント処理
    document.querySelector('[data-carousel-prev]').addEventListener('click', () => {
      moveToItem(currentIndex - 1); // 現在のインデックスから1つ前に移動
    });

    // 次のアイテムに移動するボタンのイベント処理
    document.querySelector('[data-carousel-next]').addEventListener('click', () => {
      moveToItem(currentIndex + 1); // 現在のインデックスから1つ次に移動
    });

    // 初期状態で最初のアイテムのインジケーターをアクティブにする
    updateIndicators(0);
  });

  // ページが読み込まれた後に実行されるイベントリスナー
  document.addEventListener('DOMContentLoaded', () => {
    // クラス名 'google-map-link' を持つすべてのリンクを取得
    const googleMapLinks = document.querySelectorAll('.google-map-link')
    // 各リンクにイベントリスナーを設定
    googleMapLinks.forEach(link => {
      link.addEventListener('click', (event) => {
        // デフォルトのアクション（リンクの遷移）を防止
        event.preventDefault()
        // クリックされたリンクから目的地の緯度と経度を取得
        const destinationLat = event.currentTarget.getAttribute('data-lat');
        const destinationLng = event.currentTarget.getAttribute('data-lng')
        // ユーザーの現在地を取得
        navigator.geolocation.getCurrentPosition((position) => {
          // 現在地の緯度と経度を取得
          const originLat = position.coords.latitude;
          const originLng = position.coords.longitude
          // Googleマップのルート探索URLを生成し、新しいタブで開く
          const googleMapsUri = `https://www.google.com/maps/dir/?api=1&origin=${originLat},${originLng}&destination=${destinationLat},${destinationLng}`;
          window.open(googleMapsUri, '_blank', 'noopener,noreferrer');
        }, (error) => {
          // 現在地の取得に失敗した場合のエラーハンドリング
          alert('現在地を取得できませんでした。');
        });
      });
    });
  });
</script>

<script async defer
  src="https://maps.googleapis.com/maps/api/js?key=<%= Rails.application.credentials.api_key&.fetch(:google) %>&callback=initMap">
</script>
