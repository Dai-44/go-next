<div>
  <h1 class="text-center font-bold text-slate-600 text-3xl mb-8">検索結果</h1>
</div>

<div class="flex justify-center">
  <div id="default-carousel" class="relative w-full p-5" data-carousel="slide">
    <!-- カルーセルのラッパー -->
    <div class="relative h-56 overflow-hidden rounded-lg md:h-96">
      <% @response['places'].each_with_index do |place, index| %>
        <!-- カルーセル内の個々のアイテム -->
        <div class="<%= 'hidden' unless index.zero? %> duration-700 ease-in-out h-full" data-carousel-item>
            <div class="bg-blue-100 rounded-3xl py-5 mx-5 h-full flex flex-col items-center justify-center text-slate-600 font-bold">
                <div class="px-6 rounded-sm border-b-2 border-slate-400 h-20 w-4/5 my-2">
                    <span class="flex justify-center text-center w-full mb-2"><%= place['displayName']['text'] %></span>
                    <div class="flex justify-around items-center w-full">
                        <% if logged_in? %>
                            <%= link_to 'ここへ行く', drive_records_path(destination: {
                                name: place['displayName']['text'],
                                address: place['formattedAddress'],
                                top_level_area: place["addressComponents"].find { |component| component["types"].include?("administrative_area_level_1") }["longText"],
                                second_level_area: place["addressComponents"].find { |component| component["types"].include?("administrative_area_level_2") || component["types"].include?("locality") }["longText"],
                                latitude: place['location']['latitude'],
                                longitude: place['location']['longitude'],
                                type: place['primaryType']
                            }),
                            data: { turbo_method: :post },
                            class: "p-1 rounded-lg border-2 border-slate-300" %>
                            <%= render 'destinations/bookmark_button', place: place %>
                        <% end %>
                    </div>
                </div>
            </div>
        </div>
      <% end %>

      <!-- カルーセルのインジケーター -->
      <div class="absolute bottom-0 left-0 right-0 flex justify-center p-4">
          <% @response['places'].each_with_index do |_, index| %>
              <button type="button" class="w-3 h-3 bg-white rounded-full mx-2 focus:outline-none focus:ring" data-carousel-slide-to="<%= index %>"></button>
          <% end %>
      </div>
      <!-- カルーセルのコントロールボタン -->
      <button type="button" class="absolute top-1/2 bottom-0 left-0 z-30 flex items-center justify-center w-10 h-10 mx-2 bg-white bg-opacity-75 rounded-full focus:outline-none focus:ring hover:bg-opacity-100" data-carousel-prev>
          <svg class="w-6 h-6 text-gray-700" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
          </svg>
      </button>
      <button type="button" class="absolute top-1/2 bottom-0 right-0 z-30 flex items-center justify-center w-10 h-10 mx-2 bg-white bg-opacity-75 rounded-full focus:outline-none focus:ring hover:bg-opacity-100" data-carousel-next>
          <svg class="w-6 h-6 text-gray-700" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
          </svg>
      </button>
    </div>
  </div>
</div>

<!-- マップの表示領域となる要素を定義。 -->
<div class="flex justify-center items-center">
  <div id="map" class="h-72 w-96 my-5"></div>
</div> 

<div class="text-center my-5">
  <p><%= link_to 'トップへ戻る', root_path, class: "bg-gray-500 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded w-1/4 my-2" %></p>
</div>

<script>
  // Searches#resultから受け取った各場所のデータ(@response['places'])を変数に格納
  const places = <%= @response['places'].to_json.html_safe %>;

  function initMap() {
    // ブラウザのセッションストレージから現在地の緯度と経度を取得
    const latitude = parseFloat(sessionStorage.getItem('latitude'));
    const longitude = parseFloat(sessionStorage.getItem('longitude'));

    // 取得した現在地の緯度と経度を、マップの中心点の指定時に用いる定数に設定
    const mapCenter = { lat: latitude, lng: longitude };

    // 'map'をidに持つ要素に表示する地図を作成
    const map = new google.maps.Map(document.getElementById('map'), {
      zoom: 9,
      center: mapCenter
    });

    let openInfoWindow = null; // 現在開いている情報ウィンドウを変数で管理

    // 検索結果として表示する各場所に対して繰り返し処理を定義し、マーカーを作成
    // 繰り返し処理の中で各マーカーに紐づく情報ウィンドウも作成し、マーカークリック時に表示されるようイベントハンドラを定義
    places.forEach(function(place) {
      const markerPosition = {
        lat: parseFloat(place['location']['latitude']),
        lng: parseFloat(place['location']['longitude'])
      }

      // マーカーを作成
      const marker = new google.maps.Marker({
        position: markerPosition,
        map: map,
      });

      // 情報ウィンドウ内部の、Googleマップでのルート検索リンク(「ルート検索 (Google Map)」)には、現在地を取得するクリックイベントを設定している。
      // このクリックイベント実行のために、それぞれのルート検索リンクには動的な一意のIDを付与する必要があるため、以下で生成する。
      const uniqueId = `googleMapsLink-${place['location']['latitude']}-${place['location']['longitude']}`;

      // 情報ウィンドウの表示内容を定義
      const infowindowContent = `
        <div class="text-center">
        <h1 class="font-bold">${place['displayName']['text']}</h1>
        <div>
        <p>${place['primaryType']}</p>
        <p><a href="${place['websiteUri']}" target="_blank" rel="noopener noreferrer">サイトURL</a></p>
        <p><a href="yjcarnavi://navi/select?lat=${place['location']['latitude']}&lon=${place['location']['longitude']}">ルート検索 (Yahoo!カーナビ)</a></p>
        <p><a href="#" id="${uniqueId}" data-lat="${place['location']['latitude']}" data-lng="${place['location']['longitude']}">ルート検索 (Google Map)</a></p>
        </div>
        </div>`
      // ナビ起動リンク押されたとき、外部サービスに位置情報を共有する旨のアラート出す方が良いかも。
      // 走行中にルート検索をする場合、移動によって、ルート検索時の緯度経度は検索時に取得した緯度経度から若干変わっている可能性がある。
      // そのため、以下でルート探索のリンクにクリックイベントを設定(googleMapsLink.addEventListener)して、改めて緯度と経度を取得した上でルート検索を実行している。
      // Yahoo!カーナビの方は、リンクをクリックしてアプリに遷移すると、自動的にルート探索時の現在地が出発地点として設定される。そのため、本アプリでの現在地取得は不要。

      // 上部で定義した表示内容を用いて、情報ウィンドウオブジェクトを作成
      const infowindow = new google.maps.InfoWindow({
        content: infowindowContent
      })

      marker.addListener('click', () => {
        // マーカーがクリックされた際、既に開いている情報ウィンドウがあれば閉じる
        if (openInfoWindow) {
          openInfoWindow.close();
        }
        infowindow.open({
          anchor: marker,
          map: map
        });
        openInfoWindow = infowindow // 開いた情報ウィンドウを変数に入れて管理

        // 以下で、情報ウィンドウ内の、Googleマップでのルート検索リンクのクリックイベントを定義
        // Googleマップでのルート検索リンク(uniqueIdをidにもつ要素)は、infowindowのcontentに指定されているinfowindowContent内にある。infowindowContentはinfowindow.openで情報ウィンドウが開かれたタイミングで、要素としてDOMに追加される。
        // しかし実際の動作では、DOMの変更は非同期で行われることも多く、infowindow.openの実行後ただちにinfowindowContentがDOMに追加されるとは限らない。infowindowContentがDOM要素に追加された後にgetElementByIdで要素を確実に取得するため、Maps JavaScript APIのInfoWindowオブジェクトに定義されているdomreadyイベントを利用したイベントリスナーを設定する。
        google.maps.event.addListenerOnce(infowindow, 'domready', () => {
          const googleMapsLink = document.getElementById(uniqueId);
          googleMapsLink.addEventListener('click', (event) => {
            event.preventDefault();
            const destinationLat = event.currentTarget.getAttribute('data-lat'); // イベントに関連する多くの情報を含むeventオブジェクトのcurrentTargetプロパティ(ここでは、id: googleMapsLink が設定されたaタグの要素)のgetAttributeメソッドを実行している
            const destinationLng = event.currentTarget.getAttribute('data-lng');

            // ユーザーの現在地を改めて取得
            navigator.geolocation.getCurrentPosition((position) => {
              const originLat = position.coords.latitude;
              const originLng = position.coords.longitude;

              // Googleマップのルート探索URLを生成し、別タブで開く
              const googleMapsUri = `https://www.google.com/maps/dir/?api=1&origin=${originLat},${originLng}&destination=${destinationLat},${destinationLng}`;
              window.open(googleMapsUri, '_blank', 'noopener,noreferrer');
            }, (error) => {
              alert('現在地を取得できませんでした。');
            });
          });
        });
      })
    });
  }

  document.addEventListener('DOMContentLoaded', () => {
    // カルーセルアイテムの取得
    const items = document.querySelectorAll('[data-carousel-item]');
    // インジケーターの取得
    const indicators = document.querySelectorAll('[data-carousel-slide-to]');

    // 現在表示されているアイテムのインデックス
    let currentIndex = 0;

    function updateIndicators(newIndex) {
      // 現在アクティブなインジケーターのクラスを削除
      indicators[currentIndex].classList.remove('active-indicator');

      // 新しいインジケーターにアクティブクラスを追加
      indicators[newIndex].classList.add('active-indicator');
    }

    // 指定されたインデックスのアイテムに移動する関数
    function moveToItem(index) {
      if (index >= items.length) {
        index = 0; // 最後のアイテムから次に移動する場合は最初のアイテムに戻る
      } else if (index < 0) {
        index = items.length - 1; // 最初のアイテムから前に移動する場合は最後のアイテムに移動
      }
      items[currentIndex].classList.add('hidden'); // 現在のアイテムを非表示
      items[index].classList.remove('hidden'); // 新しいアイテムを表示
      updateIndicators(index); // インジケーターの更新
      currentIndex = index; // 現在のインデックスを更新
    }

    // インジケーターのクリックイベント処理
    indicators.forEach(button => {
      button.addEventListener('click', (e) => {
        const index = parseInt(e.target.getAttribute('data-carousel-slide-to'));
        moveToItem(index); // クリックされたインジケーターのインデックスに移動
      });
    });

    // 前のアイテムに移動するボタンのイベント処理
    document.querySelector('[data-carousel-prev]').addEventListener('click', () => {
      moveToItem(currentIndex - 1); // 現在のインデックスから1つ前に移動
    });

    // 次のアイテムに移動するボタンのイベント処理
    document.querySelector('[data-carousel-next]').addEventListener('click', () => {
      moveToItem(currentIndex + 1); // 現在のインデックスから1つ次に移動
    });

    // 初期状態で最初のアイテムのインジケーターをアクティブにする
    updateIndicators(0);
  });
</script>

<!-- asyncの必要性は、この後の実装していく中で検討する。非同期でマップ作成する方が良いのか。 -->
<script async defer
  src="https://maps.googleapis.com/maps/api/js?key=<%= Rails.application.credentials.api_key&.fetch(:google) %>&callback=initMap">
</script>
