<!-- マップの表示領域となる要素を定義。 -->
<div class="flex justify-center">
  <div id="map" class="h-56 w-4/5 rounded-lg"></div>
</div>

<div>
  <div id="default-carousel" class="relative h-full py-5 flex justify-center" data-carousel="slide">
    <!-- カルーセルのラッパー -->
    <div class="relative h-96 w-11/12 overflow-hidden rounded-lg">
      <% @response['places'].each_with_index do |place, index| %>
        <!-- 以下二行は、カルーセルアイテムに設定するdata-top-level-areaとdata-second-level-area属性で用いる変数を定義している。ActiveRecordモデルではなくAPIからのレスポンスデータをベースに抽出する値であり、コントローラ側での変数の定義と代入が難しく感じたため、不適切ながら、現状では一時的な処理としてviewファイルに記述している。 -->
        <% top_level_area = place["addressComponents"].find { |component| component["types"].include?("administrative_area_level_1") }["longText"] %>
        <% second_level_area = place["addressComponents"].find { |component| component["types"].include?("administrative_area_level_2") || component["types"].include?("locality") }["longText"] %>

        <!-- カルーセル内の個々のアイテム -->
        <div class="<%= 'hidden' unless index.zero? %> h-full" data-carousel-item data-name="<%= place['displayName']['text'] %>" data-address="<%= place['formattedAddress'] %>" data-top-level-area ="<%= top_level_area %>" data-second-level-area ="<%= second_level_area %>" data-latitude="<%= place['location']['latitude'] %>" data-longitude="<%= place['location']['longitude']%>" data-type ="<%= place['primaryType'] %>" data-website-uri ="<%= place['websiteUri'] %>" data-place-id="<%= place['id'] %>">
          <div class="bg-white rounded-lg py-4 mx-5 h-full flex flex-col space-y-2 items-center text-slate-700">
            <% if @photos %>
              <%= image_tag @photos[index]['photoUri'], class: "carousel-image my-t px-5" %>
            <% else %>
              <%= image_tag "sample_image.png", class: "carousel-image my-t px-5" %>
            <% end %>
            <div class="flex flex-row space-x-2 justify-center items-center mx-1">
              <%= link_to place['displayName']['text'], place['websiteUri'], class: "text-center font-bold underline hover:text-slate-400", target: '_blank', rel: 'noopener noreferrer' %>
              <% if logged_in? %>
                <%= render "destinations/bookmark_button", place: place %>
              <% end %>
            </div>
            <div>
              <%= format_opening_hours(place) %> <!-- 現在の曜日の営業時間を示す文字列を生成するメソッド。app/helpers/searches_helper.rbで定義している。 -->
            </div>
          </div>
        </div>
      <% end %>

      <!-- カルーセルのインジケーター -->
      <div class="absolute bottom-0 left-0 right-0 flex justify-center p-4">
          <% @response['places'].each_with_index do |_, index| %>
              <button type="button" class="w-3 h-3 bg-slate-100 rounded-full mx-2 focus:outline-none focus:ring" data-carousel-slide-to="<%= index %>"></button>
          <% end %>
      </div>

      <!-- カルーセルのコントロールボタン -->
      <button type="button" class="absolute top-1/2 bottom-0 left-0 z-10 flex items-center justify-center w-10 h-10 mx-2 bg-white bg-opacity-50 rounded-full focus:outline-none focus:ring hover:bg-opacity-100" data-carousel-prev>
          <svg class="w-6 h-6 text-gray-700" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
          </svg>
      </button>
      <button type="button" class="absolute top-1/2 bottom-0 right-0 z-10 flex items-center justify-center w-10 h-10 mx-2 bg-white bg-opacity-50 rounded-full focus:outline-none focus:ring hover:bg-opacity-100" data-carousel-next>
          <svg class="w-6 h-6 text-gray-700" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
          </svg>
      </button>
    </div>
  </div>
</div>

<!-- オーバーレイ -->
<div id="overlay" class="hidden fixed inset-0 bg-slate-900 bg-opacity-50 z-20"></div>

<div class="flex items-center justify-center">
  <div class="flex items-center justify-between space-x-10 py-3 relative">
    <!-- ドロップダウンを開くボタン -->
    <div class="w-40 text-center mt-3">
      <% if logged_in? %>
        <%= link_to 'ここへ行く', '#', remote: true, id: 'dropdownDepartureLink', class: 'bg-indigo-900 hover:bg-indigo-700 text-white focus:outline-none py-3 px-8 rounded-full' %>
      <% else %>
        <%= button_tag type: 'button', id: 'dropdownDepartureButton', class: 'bg-indigo-900 hover:bg-indigo-700 text-white focus:outline-none py-3 px-6 w-40 rounded-full' do %>
          ここへ行く
        <% end %>
      <% end %>

      <!-- ドロップダウンのコンテンツ -->
      <div id="dropdownDeparture" class="hidden absolute z-30 top-1 left-1/2 transform -translate-x-1/2 w-11/12 rounded-lg shadow-lg bg-slate-50 ring-1 ring-black ring-opacity-5">
        <div class="flex flex-col justify-center h-full">
          <div class="flex flex-row items-center justify-center space-x-3 mt-5">
            <%= link_to "Yahoo!カーナビで行く", "#", class: "yahoo-navi-link text-xs text-gray-700 border-2 border-blue-500 hover:border-blue-700 hover:bg-blue-200 rounded-full px-3 py-2 transition-colors duration-200 ease-in-out" %>
            <%= link_to "Google Mapで行く", "#", class: "google-map-link text-xs text-gray-700 border-2 border-red-500 hover:border-red-700 hover:bg-red-200 rounded-full px-3 py-2 transition-colors duration-200 ease-in-out" %>
          </div>
          <div class="text-xs text-left ml-4 mt-2 pb-1">
          ※ Yahoo!カーナビアプリ の<br>&emsp;インストールが必要です
          </div>
        </div>
      </div>
    </div>
    <div class="w-40 text-center mt-3">
      <%= link_to '再検索', root_path, class: "hover:bg-slate-50 text-slate-600 border border-slate-600 py-3 px-12 rounded-full" %>
    </div>
  </div>
</div>

<script>
  const places = <%= @response['places'].to_json.html_safe %>; // Searches#resultから受け取った各場所のデータ(@response['places'])を変数に格納
  let markers = []; // マーカーを格納する配列

  function initMap() {
  // ブラウザのセッションストレージから現在地の緯度と経度を取得
    const latitude = parseFloat(sessionStorage.getItem('latitude'));
    const longitude = parseFloat(sessionStorage.getItem('longitude'));

    // 取得した現在地の緯度と経度を、マップの中心点の指定時に用いる定数に設定
    const currentLocation = { lat: latitude, lng: longitude };

    // 'map'をidに持つ要素に表示する地図を作成
    const map = new google.maps.Map(document.getElementById('map'), {
      zoom: 9,
      center: currentLocation,
      disableDefaultUI: true,
      mapTypeId: 'terrain'
    });

    // 現在地を示す青丸のアイコンを作成
    function setCurrentLocationMaker(map, position){
      new google.maps.Marker({
          position: position,
          map: map,
          icon: {
            path: google.maps.SymbolPath.CIRCLE,
            fillColor: '#115EC3',
            fillOpacity: 1,
            strokeColor: 'white',
            strokeWeight: 2,
            scale: 7
          },
      });
    }

    // 現在地を示す青丸のアイコンを表示
    setCurrentLocationMaker(map, currentLocation);
    // 検索結果として表示する各場所に対して繰り返し処理を定義し、マーカーを作成
    // 繰り返し処理の中で各マーカーに紐づく情報ウィンドウも作成し、マーカークリック時に表示されるようイベントハンドラを定義
    places.forEach(function(place) {
      const markerPosition = {
        lat: parseFloat(place['location']['latitude']),
        lng: parseFloat(place['location']['longitude'])
      }

      // マーカーを作成
      const marker = new google.maps.Marker({
        position: markerPosition,
        map: map,
        visible: false, // 初期状態では非表示に設定
      });
      markers.push(marker);
    })
    // 初期表示するカルーセルアイテムに対応するマーカーを表示
    updateMarkers(0);
  }

  // 指定されたインデックスのカルーセルアイテムに対応するマーカーを表示する関数
  function updateMarkers(index) {
    markers.forEach((marker, i) => {
      marker.setVisible(i === index); // 現在のアイテムに対応するマーカーのみを表示
    });
  }

  // カルーセルアイテムの表示切り替え処理
  document.addEventListener('DOMContentLoaded', () => {
    const items = document.querySelectorAll('[data-carousel-item]'); // カルーセルアイテムの取得
    const indicators = document.querySelectorAll('[data-carousel-slide-to]'); // インジケーターの取得
    // カルーセル外部の「ここへ行く」ボタンクリックで表示される、ドロップダウンアイテム内のリンク要素(表示されているカルーセルアイテムに対応する場所に応じてパラメータを変えるもの)を取得
    const yahooNaviLink = document.querySelector('#dropdownDeparture a.yahoo-navi-link');
    const googleMapLink = document.querySelector('#dropdownDeparture a.google-map-link');

    let currentIndex = 0; // 現在表示されているアイテムのインデックス

    // カルーセルアイテムの表示切り替えに連動してインジケーターのスタイルを切り替える処理
    function updateIndicators(newIndex) {
      indicators[currentIndex].classList.remove('active-indicator'); // 現在アクティブなインジケーターのアクティブクラスを削除
      indicators[newIndex].classList.add('active-indicator'); // 新しいインジケーターにアクティブクラスを追加
    }

    // ログインユーザー向けの「ここへ行く」リンクに含むパラメータを、カルーセルアイテムの表示切り替えに連動して更新する処理
    function updateGoToLink(index) {
      const item = items[index];
      const goToLink = document.getElementById('dropdownDepartureLink');

      // 各カルーセルアイテムに定義されたデータ属性の値を別の関数(handleGoToLinkClick)で利用できるよう、goToLinkカスタム属性として設定
      goToLink.setAttribute('data-name', item.getAttribute('data-name'));
      goToLink.setAttribute('data-address', item.getAttribute('data-address'));
      goToLink.setAttribute('data-top-level-area', item.getAttribute('data-top-level-area'));
      goToLink.setAttribute('data-second-level-area', item.getAttribute('data-second-level-area'));
      goToLink.setAttribute('data-latitude', item.getAttribute('data-latitude'));
      goToLink.setAttribute('data-longitude', item.getAttribute('data-longitude'));
      goToLink.setAttribute('data-type', item.getAttribute('data-type'));
      goToLink.setAttribute('data-website-uri', item.getAttribute('data-website-uri'));
      goToLink.setAttribute('data-place-id', item.getAttribute('data-place-id'));

      setupGoToLinkEvent();
    }

    // ログインユーザー向けの「ここへ行く」リンクに新しいイベントハンドラを設定する関数
    function setupGoToLinkEvent() {
      const goToLink = document.getElementById('dropdownDepartureLink');
      goToLink.removeEventListener('click', handleGoToLinkClick); // 古いイベントハンドラを削除
      goToLink.addEventListener('click', handleGoToLinkClick); // 新しいイベントハンドラを追加
    }

    // ログインユーザー向けの「ここへ行く」リンクがクリックされたときのイベントハンドラ
    function handleGoToLinkClick(event) {
      event.preventDefault();
      const goToLink = event.currentTarget; // クリックされたリンク要素

      // updateGoToLinkで設定したカスタム属性からデータを取得
      const name = goToLink.getAttribute('data-name');
      const address = goToLink.getAttribute('data-address');
      const topLevelArea = goToLink.getAttribute('data-top-level-area');
      const secondLevelArea = goToLink.getAttribute('data-second-level-area');
      const latitude = goToLink.getAttribute('data-latitude');
      const longitude = goToLink.getAttribute('data-longitude');
      const type = goToLink.getAttribute('data-type');
      const websiteUri = goToLink.getAttribute('data-website-uri');
      const placeId = goToLink.getAttribute('data-place-id');

      const url = `/drive_records`;

      // Ajaxを使用してPOSTリクエストを送信
      fetch(url, {
        method: 'POST',
        headers: {
          'X-CSRF-Token': document.querySelector('[name="csrf-token"]').content,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          destination: {
            name: name,
            address: address,
            top_level_area: topLevelArea,
            second_level_area: secondLevelArea,
            latitude: latitude,
            longitude: longitude,
            type: type,
            website_uri: websiteUri,
            place_id: placeId
          }
        })
      }).then(response => {
        if (response.ok) {
          // ドロップダウンを表示する関数の実行
          toggleDropdown();
        } else {
          throw new Error('Network response was not ok.');
        }
      }).catch(error => {
        console.error('There has been a problem with your fetch operation:', error);
      });
    }

    // 指定されたインデックスのアイテムに移動する関数
    function moveToItem(index) {
      if (index >= items.length) {
        index = 0; // 最後のアイテムから次に移動する場合は最初のアイテムに戻る
      } else if (index < 0) {
        index = items.length - 1; // 最初のアイテムから前に移動する場合は最後のアイテムに移動
      }
      items[currentIndex].classList.add('hidden'); // 現在のアイテムを非表示
      items[index].classList.remove('hidden'); // 新しいアイテムを表示

      // 新しいアイテムの緯度経度を取得
      const newItem = items[index];
      const latitude = newItem.getAttribute('data-latitude');
      const longitude = newItem.getAttribute('data-longitude');

      // カルーセル外部の「ここへ行く」ボタンクリックで表示される、ドロップダウンアイテム内のリンクを更新
      yahooNaviLink.href = `yjcarnavi://navi/select?lat=${latitude}&lon=${longitude}`;
      googleMapLink.href = `https://www.google.com/maps/dir/?api=1&destination=${latitude},${longitude}&travelmode=driving`;

      updateIndicators(index); // インジケーターの更新
      updateMarkers(index); // マーカーの表示を更新
      currentIndex = index; // 現在のインデックスを更新
      updateGoToLink(index); // カルーセル外部の「ここへ行く」リンクに設定する、ドライブ履歴生成のためのリンクの更新
    }

    // インジケーターのクリックイベント処理
    indicators.forEach(button => {
      button.addEventListener('click', (e) => {
        const index = parseInt(e.target.getAttribute('data-carousel-slide-to'));
        moveToItem(index); // クリックされたインジケーターのインデックスに移動
      });
    });

    // 前のアイテムに移動するボタンのイベント処理
    document.querySelector('[data-carousel-prev]').addEventListener('click', () => {
      moveToItem(currentIndex - 1); // 現在のインデックスから1つ前に移動
    });

    // 次のアイテムに移動するボタンのイベント処理
    document.querySelector('[data-carousel-next]').addEventListener('click', () => {
      moveToItem(currentIndex + 1); // 現在のインデックスから1つ次に移動
    });

    // 初期状態で最初のアイテムのインジケーターをアクティブにする
    updateIndicators(0);
    // 初期状態で、最初のアイテムに関するドライブ履歴生成のためのリンクを「ここに行く」リンクの遷移先として設定する(ログインユーザーに対してのみ)
    updateGoToLink(0);
  });

  // ドロップダウンの表示/非表示を定義する関数
  function toggleDropdown() {
    const dropdownDepartureContent = document.getElementById('dropdownDeparture');
    const overlay = document.getElementById('overlay');
    dropdownDepartureContent.classList.toggle('hidden');
    overlay.classList.toggle('hidden');
  }

  function closeDropdown() {
    const dropdownDepartureContent = document.getElementById('dropdownDeparture');
    const overlay = document.getElementById('overlay');
    dropdownDepartureContent.classList.add('hidden');
    overlay.classList.add('hidden');
  }

  // 全ユーザー向けのドロップダウン制御イベント
  document.addEventListener('DOMContentLoaded', () => {
    // 未ログインユーザー向けの「ここへ行く」ボタンが存在する場合
    const dropdownDepartureButton = document.getElementById('dropdownDepartureButton');
    if (dropdownDepartureButton) {
      dropdownDepartureButton.addEventListener('click', toggleDropdown);
    }

    // オーバーレイをクリックしたときにドロップダウンを閉じる
    const overlay = document.getElementById('overlay');
    overlay.addEventListener('click', closeDropdown);
  });
</script>

<script async defer
  src="https://maps.googleapis.com/maps/api/js?key=<%= Rails.application.credentials.api_key&.fetch(:google) %>&callback=initMap">
</script>
